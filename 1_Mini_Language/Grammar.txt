// Language Grammar

1. Alphabet:

1.1 lowercase letters (a-z) of the English alphabet
1.2 underline character '_'
1.3 decimal digits (0-9)

2. Lexical Elements

a) Special symbols

Reserved Words:
"VAR", "BEGIN", "END", "READ", "WRITE", "IF", "THEN", "WHILE", "DO", "TRUE", "FALSE", "INT".

Operators:
"+", "*", ":=", "<", "<=", "=", "AND", "MOD".

Separators:
"(", ")", "{", "}", "[", "]", ",", ";", ":", ".", space.

b) Identifiers
Imposed conditions:
- they can contain letters and digits but they must start with a small letter;
- they cannot be reserved words such as: "INT", "IF","TRUE", "READ";
- the rule is:

    identifier ::= letter | letter{letter}{digit}
    letter ::= "A" | "B" | . ..| "Z"
    digit ::= "0" | "1" |...| "9"

c) Constants
Imposed conditions:
- it is defined using basic values of the type: INT, BOOL
- it cannot be modified after a value is assigned to it

1. INT - rule:
	intconst := +no|-no|no
	no := digit{no}

2. string - rule:
	

      constchar:="string"
      string:=char{string}
      char:=letter|digit

3. BOOL - (for values of the type "TRUE" or "FALSE") rule:
    boolconst ::= "TRUE" | "FALSE"

3. Syntax
3.1 Program Structure

program ::= "VAR" declaration ";" cmpdstmt "."
declaration ::= IDENTIFIER ":" type 
type ::= "BOOL" | "INT" 

3.2 Compound Statements

cmpdstmt ::= "BEGIN" stmtlist "END"
stmtlist ::= stmt | stmt ";" stmtlist
stmt ::= simplstmt | structstmt

3.3 Simple Statements

simplstmt ::= assignstmt | iostmt 
assignstmt ::= IDENTIFIER ":=" expression
iostmt ::= "READ" "(" IDENTIFIER ")" | "WRITE" "(" expression ")"

3.4 Expressions and Conditions

expression ::= expression "+" term | term 
term ::= term "*" factor | factor 
factor ::= "(" expression ")" | IDENTIFIER | intconst | boolconst  | factor "MOD" factor

condition ::= expression RELATION expression | expression "AND" expression
RELATION ::= "<" | "<=" | "=" | "<>" | ">=" | ">"

3.5 Structured Statements

structstmt ::= ifstmt | whilestmt | cmpdstmt
ifstmt ::= "IF" condition "THEN" stmt ["ELSE" stmt] 
whilestmt ::= "WHILE" condition "DO" stmt

structdecl ::= "STRUCT" IDENTIFIER "{" fieldlist "}"
fieldlist ::= field | field ";" fieldlist
field ::= IDENTIFIER ":" type

4. Declaration
- only one variable can be decared on a row
- for the variables of type struct the fields can be accessed using the dot "." operator.
Imposed rule:

- accessfield ::= IDENTIFIER "." IDENTIFIER





