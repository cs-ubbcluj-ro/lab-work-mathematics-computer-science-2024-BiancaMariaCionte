/// Set of Terminals (Σ)
Reserved Words:
"VAR", "BEGIN", "END", "READ", "WRITE", "IF", "THEN", "WHILE", "DO", "TRUE", "FALSE", "INT", "BOOL".

Operators:
+, *, :=, <, <=, =, <>, >=, >, AND, MOD.

Separators:
|, \t, \n, (, ), ,, ;, :.

Identifiers:
Represented as letter and digit.

Constants:
Integer constants (intconst), Boolean constants (boolconst), and string literals (string).

/// Set of Non-terminals (N)

The set of non-terminals includes:

    Lexical elements:
    identifier, letter_digit_sequence, integer, integer_nonzero, digit_nonzero, string, string_content, char, boolconst.

    Program structure:
    program, declaration, type, cmpdstmt, stmtlist, stmt, simplstmt, structstmt.

    Assignments and expressions:
    assignstmt, iostmt, expression, term, factor.

    Conditions:
    condition, relation.

    Structures:
    ifstmt, whilestmt, structdecl, fieldlist, field, accessfield.

program <- start symbol
. <- end symbol
ε <- empty 

1. Alphabet:

1.1 lowercase letters (a-z) of the English alphabet
1.2 underline character '_'
1.3 decimal digits (0-9)

2. Lexical Elements
 
b) Identifiers
Imposed conditions:
- they can contain letters and digits but they must start with a small letter;
- they cannot be reserved words such as: "INT", "IF","TRUE", "READ";
- the rule is:

// IDENTIFIER
   identifier -> letter | letter letter_digit_sequence
   letter_digit_sequence -> letter | digit | letter_digit_sequence letter | letter_digit_sequence digit | ε

c) Constants
Imposed conditions:
- it is defined using basic values of the type: INT, BOOL
- it cannot be modified after a value is assigned to it

// CONSTANTS - INT
intconst -> "+" int_nonzero | "-" int_nonzero | integer
integer -> '0' | integer_nonzero
integer_nonzero -> digit_nonzero integer_end
integer_end -> ε | digit integer_end
digit_nonzero -> '1' | '2' | ... | '9'



//STRING
string -> '"' string_content '"'
string_content -> ε | char string_content
char -> letter | digit

// BOOLEAN
3. BOOL - (for values of the type "TRUE" or "FALSE") rule:
    boolconst -> "TRUE" | "FALSE" 

Productions (P)

// PROGRAM
program -> "VAR" declaration ";" cmpdstmt "."

declaration -> identifier ":" <type>
type -> "BOOL" | "INT"

cmpdstmt -> "BEGIN" stmtlist "END"
stmtlist -> stmt | stmt ";" stmtlist | ε
stmt -> simplstmt | structstmt

simplstmt -> assignstmt | iostmt

// ASSIGNMENT 
assignstmt -> identifier ":=" expression

// INPUT - OUTPUT
iostmt -> "READ" "(" <identifier> ")" | "WRITE" "(" expression ")"

expression -> expression "+" term | term
term -> term "*" factor | factor
factor -> "(" expression ")" | identifier | intconst | boolconst | factor "MOD" factor


// CONDITIONAL STATEMENT
condition -> expression relation expression | expression "AND" expression
relation -> "<" | "<=" | "=" | "<>" | ">=" | ">"

structstmt -> ifstmt | whilestmt | cmpdstmt

// IF - WHILE
ifstmt -> "IF" condition "THEN" stmt | "IF" condition "THEN" stmt "ELSE" stmt
whilestmt -> "WHILE" condition "DO" stmt

structdecl -> "STRUCT" identifier "{" fieldlist "}"
fieldlist -> field | field ";" fieldlist | ε
field -> identifier ":" type
accessfield -> identifier "." identifier





